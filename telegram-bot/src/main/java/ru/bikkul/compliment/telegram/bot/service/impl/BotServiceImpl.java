package ru.bikkul.compliment.telegram.bot.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.bikkul.compliment.telegram.bot.config.BotConfig;
import ru.bikkul.compliment.telegram.bot.model.GoodMorning;
import ru.bikkul.compliment.telegram.bot.repository.GoodMorningRepository;
import ru.bikkul.compliment.telegram.bot.service.BotService;
import ru.bikkul.compliment.telegram.bot.util.quartz.TelegramScheduler;

import java.util.*;
import java.util.concurrent.ThreadLocalRandom;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@Service
public class BotServiceImpl extends TelegramLongPollingBot implements BotService {
    private final TelegramScheduler telegramScheduler;
    private final BotConfig botConfig;
    private final GoodMorningRepository goodMorningRepository;
    private final List<BotCommand> botCommands = new ArrayList<>();
    private final Queue<String> commandCallbacks = new ArrayDeque<>();
    private List<GoodMorning> wishes;

    {
        botCommands.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."));
        botCommands.add(new BotCommand("/random", "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –Ω–∞ —É—Ç—Ä–æ."));
        botCommands.add(new BotCommand("/help", "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏."));
        botCommands.add(new BotCommand("/settings", "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."));
        botCommands.add(new BotCommand("/stop", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."));
        try {
            execute(new SetMyCommands(botCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    @Autowired
    public BotServiceImpl(TelegramScheduler telegramScheduler, BotConfig botConfig, GoodMorningRepository goodMorningRepository) {
        super(botConfig.getBotToken());
        this.telegramScheduler = telegramScheduler;
        this.botConfig = botConfig;
        this.goodMorningRepository = goodMorningRepository;
        fillPozdravokWishes();
    }

    @Override
    public void onUpdateReceived(Update update) {
        var message = update.getMessage();
        if (update.hasMessage() && message.hasText()) {
            String messageText = message.getText().toLowerCase();
            long chatId = message.getChatId();

            if (!commandCallbacks.isEmpty()) {
                receivedCallback(chatId, messageText);
            } else {
                switch (messageText) {
                    case "/start" -> {
                        startSendingWishes(message);
                        startCommandReceived(chatId);
                    }
                    case "/random" -> sendRandomWish(chatId);
                    case "/time" -> sendTimeReceived(chatId);
                    case "/help" -> sendHelpReceived(chatId);
                    case "/settings" -> settingsCommandReceived(chatId);
                    case "/stop" -> sendStopReceivec(chatId);
                    default -> doNothing(chatId);
                }
            }
        }
    }

    private void settingsCommandReceived(long chatId) {
        var time = telegramScheduler.getCronTime(chatId);

        var source = "pozdravok.com";

        var text = """
                –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
                 - –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s
                 - –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∂–µ–ª–∞–Ω–∏–π: %s
                """.formatted(time, source);
        sendMessage(chatId, text);
    }

    @Override
    public void sendRandomWish(long chatId) {
        var wish = getRandomWish();
        sendMessage(chatId, wish);
    }

    private void receivedCallback(long chatId, String messageText) {
        var command = commandCallbacks.peek();

        if (Objects.requireNonNull(command).equals("/time")) {
            updateTime(chatId, messageText);
        } else {
            doNothing(chatId);
        }
    }

    private void updateTime(long chatId, String messageText) {
        Pattern pattern = Pattern.compile("([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]");
        Matcher matcher = pattern.matcher(messageText);

        if (matcher.find()) {
            updateUserTime(chatId, messageText);
        } else {
            sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: 12:42");
        }
    }

    private void updateUserTime(long chatId, String text) {
        var times = text.split(":");
        var hour = times[0];
        var min = times[1];
        telegramScheduler.cronUpdate(chatId, "0 %s %s ? * * *".formatted(min, hour));
        sendMessage(chatId, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:" + text);
        commandCallbacks.remove();
    }

    @Override
    public String getBotUsername() {
        return botConfig.getBotName();
    }

    @Override
    public void onRegister() {
        super.onRegister();
    }

    private void startSendingWishes(Message message) {
        var chatId = message.getChatId();
        String DEFAULT_CRON_EXPRESSION = "0 0 8 ? * * *";
        telegramScheduler.cronCreateJob(chatId, DEFAULT_CRON_EXPRESSION);
        log.info("start sending wishes to user id:{}", chatId);
    }

    private void startCommandReceived(long chatId) {
        String answer = """
                –ü—Ä–∏–≤–µ—Ç, –Ø Good Morning Bot ü§ñ! –Ø —É–º–µ—é:
                               
                 ‚Ä¢ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ üñº
                 ‚Ä¢ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º
                 ‚Ä¢ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                                 
                –ë–æ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º –≤ 08:00. –î–ª—è —Å–º–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ ¬†–≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /time
                                 
                –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ¬†–≤–æ—Å–ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help
                 """;
        sendMessage(chatId, answer);
    }

    private void sendHelpReceived(long chatId) {
        String helpMessage = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
                /help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É
                /settings - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                /random - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ
                /time - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π
                """;
        sendMessage(chatId, helpMessage);
    }

    private void sendTimeReceived(long chatId) {
        var text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã";
        commandCallbacks.add("/time");
        sendMessage(chatId, text);
    }

    private void sendStopReceivec(long chatId) {
        telegramScheduler.cronDelete(chatId);
        var text = "–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.";
        log.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:{}, –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", chatId);
        sendMessage(chatId, text);
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage msg = new SendMessage(String.valueOf(chatId), textToSend);
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            log.error("error from sending message, error msg:{}", e.getMessage());
        }
    }

    public void sendMessage(long chatId) {
        String textToSend = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.";
        SendMessage msg = new SendMessage(String.valueOf(chatId), textToSend);
        try {
            execute(msg);
        } catch (TelegramApiException e) {
            log.error("error from sending message, error msg:{}", e.getMessage());
        }
    }

    private void fillPozdravokWishes() {
        wishes = goodMorningRepository.findBySource("pozdravok.com");
    }

    private String getRandomWish() {
        var random = ThreadLocalRandom.current().nextInt(wishes.size());
        return wishes.get(random).getText();
    }

    private void doNothing(Long chatId) {
        sendMessage(chatId);
    }
}
